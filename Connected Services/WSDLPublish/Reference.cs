//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WSDLPublish
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSDLPublish.IWSDLPublish")]
    public interface IWSDLPublish
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.borland.com/namespaces/Types-IWSDLPublish", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        WSDLPublish.GetPortTypeListResponse GetPortTypeList(WSDLPublish.GetPortTypeListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.borland.com/namespaces/Types-IWSDLPublish", ReplyAction="*")]
        System.Threading.Tasks.Task<WSDLPublish.GetPortTypeListResponse> GetPortTypeListAsync(WSDLPublish.GetPortTypeListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.borland.com/namespaces/Types-IWSDLPublish", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        WSDLPublish.GetWSDLForPortTypeResponse GetWSDLForPortType(WSDLPublish.GetWSDLForPortTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.borland.com/namespaces/Types-IWSDLPublish", ReplyAction="*")]
        System.Threading.Tasks.Task<WSDLPublish.GetWSDLForPortTypeResponse> GetWSDLForPortTypeAsync(WSDLPublish.GetWSDLForPortTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.borland.com/namespaces/Types-IWSDLPublish", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        WSDLPublish.GetTypeSystemsListResponse GetTypeSystemsList(WSDLPublish.GetTypeSystemsListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.borland.com/namespaces/Types-IWSDLPublish", ReplyAction="*")]
        System.Threading.Tasks.Task<WSDLPublish.GetTypeSystemsListResponse> GetTypeSystemsListAsync(WSDLPublish.GetTypeSystemsListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.borland.com/namespaces/Types-IWSDLPublish", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        WSDLPublish.GetXSDForTypeSystemResponse GetXSDForTypeSystem(WSDLPublish.GetXSDForTypeSystemRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.borland.com/namespaces/Types-IWSDLPublish", ReplyAction="*")]
        System.Threading.Tasks.Task<WSDLPublish.GetXSDForTypeSystemResponse> GetXSDForTypeSystemAsync(WSDLPublish.GetXSDForTypeSystemRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPortTypeList", WrapperNamespace="http://www.borland.com/namespaces/Types", IsWrapped=true)]
    public partial class GetPortTypeListRequest
    {
        
        public GetPortTypeListRequest()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPortTypeListResponse", WrapperNamespace="http://www.borland.com/namespaces/Types", IsWrapped=true)]
    public partial class GetPortTypeListResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string[] @return;
        
        public GetPortTypeListResponse()
        {
        }
        
        public GetPortTypeListResponse(string[] @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWSDLForPortType", WrapperNamespace="http://www.borland.com/namespaces/Types", IsWrapped=true)]
    public partial class GetWSDLForPortTypeRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string PortType;
        
        public GetWSDLForPortTypeRequest()
        {
        }
        
        public GetWSDLForPortTypeRequest(string PortType)
        {
            this.PortType = PortType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWSDLForPortTypeResponse", WrapperNamespace="http://www.borland.com/namespaces/Types", IsWrapped=true)]
    public partial class GetWSDLForPortTypeResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string @return;
        
        public GetWSDLForPortTypeResponse()
        {
        }
        
        public GetWSDLForPortTypeResponse(string @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTypeSystemsList", WrapperNamespace="http://www.borland.com/namespaces/Types", IsWrapped=true)]
    public partial class GetTypeSystemsListRequest
    {
        
        public GetTypeSystemsListRequest()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTypeSystemsListResponse", WrapperNamespace="http://www.borland.com/namespaces/Types", IsWrapped=true)]
    public partial class GetTypeSystemsListResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string[] @return;
        
        public GetTypeSystemsListResponse()
        {
        }
        
        public GetTypeSystemsListResponse(string[] @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetXSDForTypeSystem", WrapperNamespace="http://www.borland.com/namespaces/Types", IsWrapped=true)]
    public partial class GetXSDForTypeSystemRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string TypeSystem;
        
        public GetXSDForTypeSystemRequest()
        {
        }
        
        public GetXSDForTypeSystemRequest(string TypeSystem)
        {
            this.TypeSystem = TypeSystem;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetXSDForTypeSystemResponse", WrapperNamespace="http://www.borland.com/namespaces/Types", IsWrapped=true)]
    public partial class GetXSDForTypeSystemResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string @return;
        
        public GetXSDForTypeSystemResponse()
        {
        }
        
        public GetXSDForTypeSystemResponse(string @return)
        {
            this.@return = @return;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IWSDLPublishChannel : WSDLPublish.IWSDLPublish, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class WSDLPublishClient : System.ServiceModel.ClientBase<WSDLPublish.IWSDLPublish>, WSDLPublish.IWSDLPublish
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WSDLPublishClient() : 
                base(WSDLPublishClient.GetDefaultBinding(), WSDLPublishClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.IWSDLPublishPort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WSDLPublishClient(EndpointConfiguration endpointConfiguration) : 
                base(WSDLPublishClient.GetBindingForEndpoint(endpointConfiguration), WSDLPublishClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WSDLPublishClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WSDLPublishClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WSDLPublishClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WSDLPublishClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WSDLPublishClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public WSDLPublish.GetPortTypeListResponse GetPortTypeList(WSDLPublish.GetPortTypeListRequest request)
        {
            return base.Channel.GetPortTypeList(request);
        }
        
        public System.Threading.Tasks.Task<WSDLPublish.GetPortTypeListResponse> GetPortTypeListAsync(WSDLPublish.GetPortTypeListRequest request)
        {
            return base.Channel.GetPortTypeListAsync(request);
        }
        
        public WSDLPublish.GetWSDLForPortTypeResponse GetWSDLForPortType(WSDLPublish.GetWSDLForPortTypeRequest request)
        {
            return base.Channel.GetWSDLForPortType(request);
        }
        
        public System.Threading.Tasks.Task<WSDLPublish.GetWSDLForPortTypeResponse> GetWSDLForPortTypeAsync(WSDLPublish.GetWSDLForPortTypeRequest request)
        {
            return base.Channel.GetWSDLForPortTypeAsync(request);
        }
        
        public WSDLPublish.GetTypeSystemsListResponse GetTypeSystemsList(WSDLPublish.GetTypeSystemsListRequest request)
        {
            return base.Channel.GetTypeSystemsList(request);
        }
        
        public System.Threading.Tasks.Task<WSDLPublish.GetTypeSystemsListResponse> GetTypeSystemsListAsync(WSDLPublish.GetTypeSystemsListRequest request)
        {
            return base.Channel.GetTypeSystemsListAsync(request);
        }
        
        public WSDLPublish.GetXSDForTypeSystemResponse GetXSDForTypeSystem(WSDLPublish.GetXSDForTypeSystemRequest request)
        {
            return base.Channel.GetXSDForTypeSystem(request);
        }
        
        public System.Threading.Tasks.Task<WSDLPublish.GetXSDForTypeSystemResponse> GetXSDForTypeSystemAsync(WSDLPublish.GetXSDForTypeSystemRequest request)
        {
            return base.Channel.GetXSDForTypeSystemAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.IWSDLPublishPort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.IWSDLPublishPort))
            {
                return new System.ServiceModel.EndpointAddress("http://bosdemo.enta.com.au/bosservices.dll/soap/IWSDLPublish");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WSDLPublishClient.GetBindingForEndpoint(EndpointConfiguration.IWSDLPublishPort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WSDLPublishClient.GetEndpointAddress(EndpointConfiguration.IWSDLPublishPort);
        }
        
        public enum EndpointConfiguration
        {
            
            IWSDLPublishPort,
        }
    }
}
